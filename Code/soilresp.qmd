---
title: "Untitled"
format: html
editor: visual
---

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
library(tidyverse)
library(janitor)
library(stringr)
library(ggpubr)
library(broom)
library(rstatix)
library(lme4)
library(nlme)
```

You can add options to executable code like this

```{r}
#| echo: false
data <- read.csv("../Data/soilresp_midterm.csv")
data
summary(data)
```

The `echo: false` option disables the printing of code (only output is displayed).

```{r}
data_w <- data[-26,] %>% 
  clean_names() %>% 
  mutate(treatment = factor(treatment)) %>% 
  
  mutate(
    rep = case_when
    (plot == c(1:5) ~ "1",
    plot == c(6:10) ~ "2",
      plot == c(11:15) ~ "3",
      plot == c(16:20) ~ "4", 
      plot == c(21:25) ~ "5"
     )
  ) %>% 
  mutate(rep = factor(rep)) %>% 
  pivot_longer(cols =r1_01_29_24:r6_02_07_24,
               values_to = "respiration",
               names_to = "x1")   %>%
   mutate(x1 = gsub("resp", "", x1)) %>% 
 mutate(date1 = str_extract(x1, "\\d{2}_\\d{2}_\\d{2}")
  ) %>% 
  mutate(date = as.Date(date1, "%m_%d_%y")) %>% 
  mutate(dar = case_when(
    date == "2024-01-29" ~ "01",
    date == "2024-01-30" ~ "02", 
    date == "2024-01-31" ~ "03",
    date == "2024-02-05" ~ "08", 
    date == "2024-02-06" ~ "09",
    date == "2024-02-07" ~ "10"
  )) %>% 
  mutate(drying_cycle = case_when(
    date == "2024-01-29" ~ "1",
    date == "2024-01-30" ~ "1", 
    date == "2024-01-31" ~ "1",
    date == "2024-02-05" ~ "2", 
    date == "2024-02-06" ~ "2",
    date == "2024-02-07" ~ "2")
  ) %>% 
  mutate(fdar = factor(dar)) %>%
  mutate(dar = as.numeric(dar)) %>% 
  mutate(drying_cycle = factor(drying_cycle)) %>% 
  select(c(-x1,-date1)) %>%
  mutate(plot=factor(plot))

summary(data_w)
```
```{r}
data_w %>%
  group_by(treatment, fdar) %>%
  tally
```
```{r}
data_w %>%
  distinct(treatment, fdar, rep, plot)
```

```{r EDA}
data_w %>% 
  ggplot(aes(fdar,respiration))+
  geom_boxplot()+
 facet_wrap(~treatment)
  
```

One of the assumptioins of the ancova model is that the dependent variable must be linearly related to the covariates.

```{r}
data_w %>% 
   pivot_longer(cols = starts_with("sw"),
               values_to = "watercontent", 
               names_to = "x2"
               ) %>% 
  mutate(x2 = gsub("water", "", x2)) %>% 
  pivot_longer(cols = st1:st6,
               values_to = "soiltemp",
               names_to = "x3") %>% 
  mutate(x3 = gsub("temp", "", x3)) %>% 
  ggscatter(x= "watercontent", y ="respiration",
            color = "treatment", add = "reg.line")+
  stat_regline_equation(
    aes(label =  paste(..eq.label.., ..rr.label.., sep = "~~~~"), color = treatment)
    )
```

The linearity assumption seems to be not satisfied, and thus we move ahead with just the anova analysis.

```{r - default model}
options(contrasts = c("contr.sum", "contr.poly"))

mix_mod <- lme(respiration ~ treatment*fdar,
                random = ~ 1 |rep/plot,
                data = data_w)
mix_mod
```

```{r}
Anova(mix_mod,type = 3)
ACF(mix_mod, resType = "n") %>% 
  plot(alpha = 0.01)
```

```{r - autroregressive moving average }
mod2_ma <- lme(respiration ~ treatment*fdar,
                random = ~1 |rep/plot,
               correlation = corARMA(p = 1, q = 1),
                data = data_w)
mod2_ma
ACF(mod2_ma,resType = "n") %>% 
  plot(alpha = 0.01)
```

```{r - comparison}
anova(mix_mod,mod2_ma)
```

```{r - exponential}
mod3_exp <- lme(respiration ~ treatment*fdar,
                random = ~1 |rep/plot,
                correlation = corExp(form = ~dar),
                data = data_w)
mod3_exp
```
```{r}
ACF(mod3_exp, resType = "n") %>%
  plot(alpha = 0.01)
```


```{r - comparison}
anova(mix_mod,mod3_exp)
```
```{r - Gaussian}
mod4_gaus <- lme(respiration ~ treatment*fdar,
                random = ~1 |rep/plot,
                correlation = corGaus(form = ~dar),
                data = data_w)
mod4_gaus
```
```{r}
ACF(mod4_gaus, resType = "n") %>%
  plot(alpha = 0.01)
```

```{r - comparison}
anova(mix_mod, mod4_gaus)
```

```{r Linear}
mod5_lin <- lme(respiration ~ treatment*fdar,
                random = ~1 |rep/plot,
                correlation = corLin(form = ~dar),
                data = data_w)

mod5_lin
```
```{r}
ACF(mod5_lin, resType = "n") %>%
  plot(alpha = 0.01)
```

```{r - Rational Quadratic }
mod6_rq <- lme(respiration ~ treatment*fdar,
                random = ~1 |rep/plot,
                correlation = corRatio(form = ~dar),
                data = data_w)
mod6_rq
```
```{r}
ACF(mod6_rq, resType = "n") %>%
  plot(alpha = 0.01)
```

```{r - Spherical}
mod7_sph <- lme(respiration ~ treatment*fdar,
                random = ~1 |rep/plot,
                correlation = corSpher(form = ~dar),
                data = data_w)
mod7_sph
```
```{r}
ACF(mod7_sph, resType = "n") %>%
  plot(alpha = 0.01)
```

```{r - Final comparison}
anova(mix_mod, mod2_ma, mod3_exp, mod4_gaus, mod5_lin, mod6_rq, mod7_sph) %>%
  as.data.frame() %>%
  rownames_to_column(var = "modelname") %>%
  janitor::clean_names() %>%
  dplyr::select(modelname, model, df, aic, bic) %>%
  arrange(aic)
```
Best model - mod2 ma
# checking residuals 
```{r}
library(broom.mixed)
mod2_ma_resid <- augment(mod2_ma) %>% 
  mutate(.stdresid = resid(mod2_ma,
                           type = "pearson",
                           scaled = T
                           ))
mod2_ma_resid 



```
```{r - block random effects}
ranef(mod2_ma)[[1]] %>% 
   ggplot(aes(sample=`(Intercept)`))+
  stat_qq(  shape = 21,
            fill = "purple", 
            size = 3,
            alpha = .7
  )+
  stat_qq_line()+
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()

```

# blocks:plots random effects 
```{r}
ranef(mod2_ma)[[2]] %>% 
   ggplot(aes(sample=`(Intercept)`))+
  stat_qq(  shape = 21,
            fill = "purple", 
            size = 3,
            alpha = .7
  )+
  stat_qq_line()+
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()
```

# within groups errors 
```{r}
ggplot(mod2_ma_resid, aes(x=.fitted, y=.stdresid))+
  geom_hline(yintercept = 0, color="red")+
  geom_point(shape = 21,
             fill = "purple", 
             size = 3,
             alpha = .7)+
  geom_smooth()+
  geom_hline(yintercept = c(-3,3), color = "red")+
  theme_bw()
```
normality assumptions 
```{r}
ggplot(mod2_ma_resid, aes(sample=.stdresid))+
  stat_qq(  shape = 21,
            fill = "purple", 
            size = 3,
            alpha = .7
  )+
  stat_qq_line()+
  labs(x = "Theoretical quantile",
       y = "Sample quantile")+
  theme_bw()
```

```{r}
 
```

```{r}

```

```{r}

```

